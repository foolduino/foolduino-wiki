<!---title:Foolduino起步教程-->
<!---keywords:-->
<!---date:2018.09.02; modification:2018.09.03-->

# Foolduino核心板使用

Foolduino的基本版, 其实就是对于Arduino uno的一种硬件结构上的变形, 即将如下图的uno:

![Arduino UNO](foolduino_getting_start_uno_cut.jpg)

其中的红框标出的两部分, 变形(拆分)为:

![Foolduino Core & Com](foolduino_getting_start_fdn_core_com.jpg)

所以其软件是与 Arduino UNO 通用的(包括bootloader以及用户程序). 这样就可以将用户的学习成本降到最低.

**硬件使用注意事项**: Foolduino的基本硬件板型都是这种双列结构. 为了节省所占空间,
该结构没有在物理上做防反查设计, 这就需要用户注意根据板上的标记来区分方向. Foolduino基本结构上一般会有两种标记可以用来区分(两者至少有其一):

* 标记1: 如上图中右下角的红色框内的两个空焊盘, 这两个脚原本是core模块的A6, A7位置, 出厂默认是不焊接排针的. 可以根据这两个焊盘的位置来作为一种标记.
* 标记2: 如上图中core模块的左上角的大圆点丝印, 如果PCB上空间允许, 就会有这个圆点作为标记.

以上两种标记选其一进行方向对齐, 然后板对板堆叠插接即可. 如下图:

<!-- ![插接示意图](foolduino_getting_start_hd_connect.jpg) -->
![插接示意图](foolduino_getting_start_hd_connect.png)

插接之后, 将下载线连到u口, 便可以进行软件开发了.

# 软件开发起步教程

## 安装开发环境

如果您还没有Foolduino(Arduino)的IDE环境, 请参考:

[Windows环境下搭建Foolduino(Arduino)开发环境教程](wiki/foolduino/tutor/arduino_dev_tool_win.html)

[Linux(Ubuntu)环境下搭建Foolduino(Arduino)开发环境教程](wiki/foolduino/tutor/arduino_dev_tool_linux.html)

## 烧写测试程序

一般软件开发的第一个程序, 都是注明的 "Hello world", 但是Foolduino(或Arduino UNO)上都不自带屏幕. 如何进行 "Hello world" 测试呢?

对于这个问题Foolduino(或Arduino UNO)采用了一种更加简单的方式: 板上都默认自带了一个LED灯(连接在Arduino 13引脚),
然后IDE中有一个Blink程序, 用来做LED灯的闪烁, 只需要下载便可运行.

具体步骤如下:

1. 打开IDE, 然后在菜单选择:

        文件 -- 示例 -- 01.Basics -- Blink

2. 默认程序代码不用修改, 然后选择:

        工具 -- 开发板 -- Arduino/Genuino Uno

3. 然后选择串口:

        工具 -- 端口 -- /dev/ttyUSB0

    **注意**: 这里的端口选择在不同的电脑上, 会由于端口号不同而名称不同.
    在windows上可能会是ComX(其中X为数字), 根据本机进行选择即可.
    如果有多个串口不知如何选择, 可以试试拔下在插上串口, 看看那个端口号有变化.


4. 烧写程序到Foolduino开发板. 选择:

        项目 -- 上传

然后会看到Arduino IDE的下方会打印一些编译与烧写的log, 如果您看到如下log:

    avrdude: verifying ...
    avrdude: 928 bytes of flash verified

    avrdude done.  Thank you.

则说明Blink程序已经成功烧写到Foolduino板子上. 此时应该会能看到板子上的LED灯在闪烁.

## 修改程序

在刚刚的blink程序中, 可以看到最下方有类似如下代码:

    void loop() {
        digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)
        delay(1000);                       // wait for a second
        digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW
        delay(1000);                       // wait for a second
    }

修改 `delay(1000)` 的数值(单位为毫秒), 如改为500或2000(别改的太小, 太小了可能就变成常亮了).
然后重复上面的 "烧写" 步骤. 此时应该可以看到LED灯闪烁的频率改变了.


<!-- vim:set tw=0:-->
